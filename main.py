import asyncio
import aiosqlite
import aiohttp
import async_timeout
import logging
import html
import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters.command import Command
from aiogram import F
from aiogram.exceptions import TelegramBadRequest

load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
CRYPTOBOT_API_TOKEN = os.getenv("CRYPTOBOT_API_TOKEN")
CRYPTOBOT_API_URL = 'https://pay.crypt.bot/api'
PRIVATE_CHANNEL_LINK = os.getenv("PRIVATE_CHANNEL_LINK")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID"))
DB_PATH = os.getenv("DB_PATH", "subscriptions.db")

for handler in logging.root.handlers[:]:
    logging.root.removeHandler(handler)

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –≤ —Ñ–∞–π–ª –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

main_buttons = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–∫—É", callback_data="buy")],
    [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")],
    [InlineKeyboardButton(text="–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏", callback_data="support")]
])

tariff_buttons = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ù–µ–¥–µ–ª—è - 499 —Ä—É–±–ª–µ–π", callback_data="tariff_week")],
    [InlineKeyboardButton(text="–ú–µ—Å—è—Ü - 699 —Ä—É–±–ª–µ–π", callback_data="tariff_month")],
    [InlineKeyboardButton(text="–ì–æ–¥ - 1299 —Ä—É–±–ª–µ–π", callback_data="tariff_year")],
    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
])

payment_buttons = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ü–æ –Ω–æ–º–µ—Ä—É –±–∞–Ω–∫.–∫–∞—Ä—Ç—ã - –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", callback_data="pay_–ü–æ –Ω–æ–º–µ—Ä—É –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã")],
    [InlineKeyboardButton(text="–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data="pay_–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞")],
    [InlineKeyboardButton(text="–ÆMoney (–Ø.–î–µ–Ω—å–≥–∏) - –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", callback_data="pay_–ÆMoney (–Ø.–î–µ–Ω—å–≥–∏)")],
    [InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ Tribute (RUB, USD, EUR)", callback_data="pay_–ß–µ—Ä–µ–∑ Tribute")],
    [InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ Cryptobot", callback_data="pay_Cryptobot")],
    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_tariffs")]
])

payment_confirm_buttons = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏–ª ‚úÖ", callback_data="paid_confirm"),
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_payment_methods")
    ],
    [
        InlineKeyboardButton(text="üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É –µ—â—ë —Ä–∞–∑", callback_data="paid_check_again")
    ]
])

payment_details = {
    "–ü–æ –Ω–æ–º–µ—Ä—É –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã": (
        "–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n\n"
        "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –°–±–µ—Ä–±–∞–Ω–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        "–í–ª–∞–¥–µ–ª–µ—Ü: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        "–ë–∞–Ω–∫: –°–±–µ—Ä–±–∞–Ω–∫\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        "–£–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É –Ω–µ –Ω—É–∂–Ω–æ!"
    ),

    "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞": (
        "1. –ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ—à–µ–ª—å–∫–æ–≤:\n\n"
        "<b>USDT TRC-20</b>:\n<code>TGwEy2u4qMDPWs9pGjbmmHfL41AXDaffLs</code>\n\n"
        "<b>USDT BEP-20 (BNB Smart Chain)</b>:\n<code>0x036a1Bd6213ccc1f0893CeD6306e8430F5618d44</code>\n\n"
        "<b>USDT (TON)</b>:\n<code>UQA-j-ixpSuyrY_cdmymJDg_rnir5mc_1zeu4qjAzJPZBQL0</code>\n\n"
        "<b>USDT ERC-20 (Ethereum)</b>:\n<code>0x036a1Bd6213ccc1f0893CeD6306e8430F5618d44</code>\n\n"
        "2. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É <b>—Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</b>.\n\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        "<b>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:</b> –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ –∞–¥—Ä–µ—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n"
        "–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞."
    ),

    "–ÆMoney (–Ø.–î–µ–Ω—å–≥–∏)": (
        "–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n\n"
        "üí≥ –ù–æ–º–µ—Ä —Å—á—ë—Ç–∞ –ÆMoney (–Ø.–î–µ–Ω—å–≥–∏): –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        "–ó–∞–ø–æ–ª–Ω—è–π—Ç–µ –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ!"
    ),

    "–ß–µ—Ä–µ–∑ Tribute": (
        "<b>‚ö†Ô∏è –í–∞–∂–Ω–æ:</b> –¥–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –º–æ–∂–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑-–∑–∞ –Ω–µ–ø–æ–ª–∞–¥–æ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö Telegram.\n\n"
        "<b>üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã</b> –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏:\n"
        "‚Äî –∏–∑ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∏–ª–∏\n"
        "‚Äî –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è <a href='https://t.me/tribute'>Tribute</a>\n\n"
        "–ù–∞ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á—ë—Ç–∫–æ –≤–∏–¥–Ω—ã:\n"
        "‚Ä¢ –¥–∞—Ç–∞\n"
        "‚Ä¢ –≤—Ä–µ–º—è\n"
        "‚Ä¢ —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞\n\n"
        "<b>üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Tribute:</b>\n"
        "<a href='https://t.me/tribute/app?startapp=dsqJ'>–û—Ç–∫—Ä—ã—Ç—å Tribute</a>"
    )
}

async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS subscriptions (
                user_id INTEGER PRIMARY KEY,
                tariff TEXT,
                method TEXT,
                payment_id TEXT,
                paid INTEGER
            )
        """)
        await db.commit()

async def set_subscription(user_id, tariff, method=None, payment_id=None, paid=False):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            INSERT INTO subscriptions(user_id, tariff, method, payment_id, paid)
            VALUES (?, ?, ?, ?, ?)
            ON CONFLICT(user_id) DO UPDATE SET
                tariff=excluded.tariff,
                method=excluded.method,
                payment_id=excluded.payment_id,
                paid=excluded.paid
        """, (user_id, tariff, method, payment_id, int(paid)))
        await db.commit()

async def get_subscription(user_id):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT tariff, method, payment_id, paid FROM subscriptions WHERE user_id = ?", (user_id,))
        row = await cur.fetchone()
        return {"tariff": row[0], "method": row[1], "payment_id": row[2], "paid": bool(row[3])} if row else None

async def update_payment_status(user_id, paid):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE subscriptions SET paid = ? WHERE user_id = ?", (int(paid), user_id))
        await db.commit()

async def create_cryptobot_payment(amount_usd, user_id, user_name):
    url = f"{CRYPTOBOT_API_URL}/createInvoice"
    payload = {
        "asset": "USDT",
        "amount": amount_usd,
        "description": f"–ü–ª–∞—Ç—ë–∂ –æ—Ç {user_name or user_id}",
        "hidden_message": "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!",
        "paid_btn_name": "openBot",
        "paid_btn_url": "https://t.me/Camsslivbot"
    }
    headers = {
        "Crypto-Pay-API-Token": CRYPTOBOT_API_TOKEN,
        "Content-Type": "application/json"
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with async_timeout.timeout(10):
                resp = await session.post(url, json=payload, headers=headers)
                data = await resp.json()
                if data.get("ok") and data.get("result"):
                    invoice = data["result"]
                    return invoice["invoice_id"], invoice["pay_url"]
    except Exception as e:
        logging.error(f"[DB] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")
    return None, None

def get_user_mention(user: types.User) -> str:
    return f"@{user.username}" if user.username else f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å](tg://user?id={user.id})"

async def check_cryptobot_payment(invoice_id):
    url = f"{CRYPTOBOT_API_URL}/getInvoices"
    payload = {"invoice_ids": [invoice_id]}
    headers = {
        "Crypto-Pay-API-Token": CRYPTOBOT_API_TOKEN,
        "Content-Type": "application/json"
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with async_timeout.timeout(10):
                resp = await session.post(url, json=payload, headers=headers)
                data = await resp.json()
                if data.get("ok") and data.get("result"):
                    return data["result"][0]["status"] == "paid"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã: {e}")
    return False

@dp.message(Command("start"))
async def start_handler(msg: types.Message):
    user = msg.from_user
    mention = get_user_mention(user)
    logging.info(f"[START] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({mention}) –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.")
    await msg.answer("üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª.")
    await msg.answer("–ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:", reply_markup=main_buttons)
    await bot.send_message(ADMIN_CHAT_ID, f"üì• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} –∑–∞—à–µ–ª –≤ –±–æ—Ç–∞.")

@dp.callback_query(F.data == "buy")
async def buy_callback(cb: types.CallbackQuery):
    try:
        await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=tariff_buttons)
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise
    await cb.answer()

@dp.callback_query(F.data == "back_to_main")
async def back_to_main(cb: types.CallbackQuery):
    try:
        await cb.message.edit_text("–ü—Ä–∏–≤–µ—Ç! –ö—É–ø–∏ –¥–æ—Å—Ç—É–ø –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª üëá", reply_markup=main_buttons)
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise
    await cb.answer()

@dp.callback_query(F.data == "back_to_tariffs")
async def back_to_tariffs(cb: types.CallbackQuery):
    try:
        await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=tariff_buttons)
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise
    await cb.answer()

@dp.callback_query(F.data == "back_to_payment_methods")
async def back_to_payment_methods(cb: types.CallbackQuery):
    sub = await get_subscription(cb.from_user.id)
    if not sub or not sub.get("tariff"):
        await cb.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ", show_alert=True)
        return

    display_tariff_map = {"week": "–ù–µ–¥–µ–ª—è", "month": "–ú–µ—Å—è—Ü", "year": "–ì–æ–¥"}
    price_map = {"week": "499‚ÇΩ", "month": "699‚ÇΩ", "year": "1299‚ÇΩ"}
    display_tariff = display_tariff_map.get(sub['tariff'], "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    price = price_map.get(sub['tariff'], "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    try:
        await cb.message.edit_text(
            f"üì¶ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: <b>{display_tariff}</b> ‚Äî <b>{price}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:",
            reply_markup=payment_buttons,
            parse_mode="HTML"
        )
    except TelegramBadRequest as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
        if "message is not modified" not in str(e):
            raise

    await cb.answer()

@dp.callback_query(F.data == "paid_check_again")
async def check_again_callback(cb: types.CallbackQuery):
    sub = await get_subscription(cb.from_user.id)
    if not sub or not sub.get("payment_id"):
        await cb.answer("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–π –æ–ø–ª–∞—Ç—ã.", show_alert=True)
        return

    if await check_cryptobot_payment(sub["payment_id"]):
        logging.info(f"[CHECK] –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {cb.from_user.id}")
        await update_payment_status(cb.from_user.id, True)
        await cb.message.edit_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n–°—Å—ã–ª–∫–∞: {PRIVATE_CHANNEL_LINK}")
        await bot.send_message(ADMIN_CHAT_ID, f"üí≥ –û–ø–ª–∞—Ç–∞: {cb.from_user.id} ‚Äî {sub['tariff']}")
    else:
        logging.info(f"[CHECK] –û–ø–ª–∞—Ç–∞ –ù–ï –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {cb.from_user.id}")
        await cb.answer("–û–ø–ª–∞—Ç–∞ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.", show_alert=True)

@dp.message(Command("check"))
async def check_payment_command(msg: types.Message):
    sub = await get_subscription(msg.from_user.id)
    if not sub or not sub.get("payment_id"):
        await msg.answer("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–π –æ–ø–ª–∞—Ç—ã.")
        return

    if await check_cryptobot_payment(sub["payment_id"]):
        await update_payment_status(msg.from_user.id, True)
        await msg.answer(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n–°—Å—ã–ª–∫–∞: {PRIVATE_CHANNEL_LINK}")
        await bot.send_message(ADMIN_CHAT_ID, f"üí≥ –û–ø–ª–∞—Ç–∞: {msg.from_user.id} ‚Äî {sub['tariff']}")
    else:
        await msg.answer("–û–ø–ª–∞—Ç–∞ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")

@dp.callback_query(F.data == "support")
async def support(cb: types.CallbackQuery):
    support_back = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
    )
    await cb.message.edit_text("‚ùì –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã —Å –æ–ø–ª–∞—Ç–æ–π, –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π –ø–æ–¥–ø–∏—Å–∫–∏, –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –∏ –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\nhttps://t.me/DorianLaren", reply_markup=support_back)
    await cb.answer()

@dp.callback_query(F.data == "check_subscription")
async def check_subscription(cb: types.CallbackQuery):
    support_back = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
    )
    sub = await get_subscription(cb.from_user.id)
    text = f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞! –°—Å—ã–ª–∫–∞: {PRIVATE_CHANNEL_LINK}" if sub and sub['paid'] else "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    await cb.message.edit_text(text, reply_markup=support_back)
    await cb.answer()

@dp.callback_query(F.data.startswith("tariff_"))
async def choose_tariff(cb: types.CallbackQuery):
    tariff = cb.data.split("_", 1)[1]
    logging.info(f"[TARIFF] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {cb.from_user.id} –≤—ã–±—Ä–∞–ª —Ç–∞—Ä–∏—Ñ: {tariff}")
    display_tariff_map = {"week": "–ù–µ–¥–µ–ª—è", "month": "–ú–µ—Å—è—Ü", "year": "–ì–æ–¥"}
    price_map = {"week": "499‚ÇΩ", "month": "699‚ÇΩ", "year": "1299"}
    display_tariff = display_tariff_map.get(tariff, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    price = price_map.get(tariff, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    await set_subscription(cb.from_user.id, tariff, method=None, payment_id=None, paid=False)
    try:
        await cb.message.edit_text(
            f"üì¶ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: <b>{display_tariff}</b> ‚Äî <b>{price}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:",
            reply_markup=payment_buttons,
            parse_mode="HTML"
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise
    await cb.answer()

@dp.callback_query(F.data.startswith("pay_"))
async def choose_payment(cb: types.CallbackQuery):
    method = cb.data.split("_", 1)[1]
    logging.info(f"[PAYMENT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {cb.from_user.id} –≤—ã–±—Ä–∞–ª —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {method}")
    user_id = cb.from_user.id
    sub = await get_subscription(user_id)
    if not sub or not sub.get("tariff"):
        await cb.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ", show_alert=True)
        return

    display_tariff_map = {"week": "–ù–µ–¥–µ–ª—è", "month": "–ú–µ—Å—è—Ü", "year": "–ì–æ–¥"}
    price_map = {"week": "499‚ÇΩ", "month": "699‚ÇΩ", "year": "1299‚ÇΩ"}
    usd_price_map = {"week": "6$", "month": "8.5$", "year": "15$"}

    display_tariff = display_tariff_map.get(sub['tariff'], "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    price = price_map.get(sub['tariff'], "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    usd_price = usd_price_map.get(sub['tariff'], "6$")

    details = payment_details.get(method)

    if method == "Cryptobot":
        usd_amount_value = {"week": 6, "month": 8.5, "year": 15}.get(sub['tariff'], 6)
        pid, url = await create_cryptobot_payment(usd_amount_value, user_id, cb.from_user.username)
        if pid and url:
            logging.info(f"[CRYPTOBOT] –°–æ–∑–¥–∞–Ω –∏–Ω–≤–æ–π—Å {pid} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await set_subscription(user_id, sub['tariff'], method, pid, False)
            asyncio.create_task(schedule_payment_reminder(user_id, 600))  # 600 —Å–µ–∫—É–Ω–¥ = 10 –º–∏–Ω—É—Ç

            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Cryptobot", url=url)],
                *payment_confirm_buttons.inline_keyboard
            ])

            await cb.message.edit_text(
                f"üì¶ –¢–∞—Ä–∏—Ñ: <b>{display_tariff}</b> ‚Äî <b>{price}</b> / <b>{usd_price}</b>\n"
                f"üí≥ –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: <b>Cryptobot</b>\n"
                f"üë§ –í–∞—à ID: <code>{user_id}</code>\n\n"
                f"–ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá\n\n"
                f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–û–ø–ª–∞—Ç–∏–ª ‚úÖ'.",
                reply_markup=markup,
                parse_mode="HTML"
            )
        else:
            logging.info(f"[CRYPTOBOT] –°–æ–∑–¥–∞–Ω –∏–Ω–≤–æ–π—Å {pid} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await cb.answer("–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å Cryptobot. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return  # –í–ê–ñ–ù–û: —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –Ω–∏–∂–µ

    # –î—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã
    if not details:
        await cb.message.edit_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –º–µ—Ç–æ–¥—É –æ–ø–ª–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        await cb.answer()
        return

    extra_price_note = f" / <b>{usd_price}</b>" if method == "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞" else ""
    await set_subscription(user_id, sub['tariff'], method, payment_id=None, paid=False)

    if method == "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞":
        markup = payment_confirm_buttons
    elif method == "–ß–µ—Ä–µ–∑ Tribute":
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û—Ç–∫—Ä—ã—Ç—å –æ–ø–ª–∞—Ç—É –≤ Tribute", url="https://t.me/tribute/app?startapp=dsqJ")],
            *payment_confirm_buttons.inline_keyboard
        ])
    else:
        markup = payment_confirm_buttons

    final_text = (
        f"üìÜ –¢–∞—Ä–∏—Ñ: <b>{display_tariff}</b> ‚Äî <b>{price}</b>{extra_price_note}\n"
        f"üí≥ –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: <b>{method}</b>\n"
        f"üë§ –í–∞—à ID: <code>{user_id}</code>\n\n"
        f"{details}"
    )

    if method != "–ß–µ—Ä–µ–∑ Tribute":
        final_text += "\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–û–ø–ª–∞—Ç–∏–ª ‚úÖ'."

    await cb.message.edit_text(final_text, reply_markup=markup, parse_mode="HTML")
    await cb.answer()

@dp.callback_query(F.data == "paid_confirm")
async def confirm_payment(cb: types.CallbackQuery):
    sub = await get_subscription(cb.from_user.id)
    if not sub or not sub.get("payment_id"):
        await cb.answer("–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    if await check_cryptobot_payment(sub["payment_id"]):
        await update_payment_status(cb.from_user.id, True)
        await cb.message.edit_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n–°—Å—ã–ª–∫–∞: {PRIVATE_CHANNEL_LINK}")
        await bot.send_message(ADMIN_CHAT_ID, f"üí≥ –û–ø–ª–∞—Ç–∞: {cb.from_user.id} ‚Äî {sub['tariff']}")
    else:
        await cb.answer("–û–ø–ª–∞—Ç–∞ –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@dp.message()
async def fallback_message(msg: types.Message):
    await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start.")

@dp.callback_query()
async def fallback_callback(cb: types.CallbackQuery):
    logging.warning(f"[UNKNOWN CALLBACK] {cb.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {cb.from_user.id}")
    await cb.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞.", show_alert=True)

async def schedule_payment_reminder(user_id: int, delay: int):
    await asyncio.sleep(delay)
    sub = await get_subscription(user_id)

    if sub and not sub["paid"]:
        try:
            await bot.send_message(
                user_id,
                "üí° –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: –≤—ã –Ω–∞—á–∞–ª–∏ –æ–ø–ª–∞—Ç—É, –Ω–æ –µ—â—ë –Ω–µ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏–ª ‚úÖ'.\n"
                "–ï—Å–ª–∏ —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã.",
            )
            logging.info(f"[REMINDER] –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logging.error(f"[REMINDER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

async def main():
    await init_db()
    logging.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
